{"version":3,"sources":["../src/index.ts","../src/socket.ts","../src/hook.ts"],"sourcesContent":["export * from './socket';\r\nexport * from './hook';\r\nexport * from './types';\r\n","import {useEffect, useState} from 'react';\r\nimport {Data} from './types';\r\n\r\nenum Op {\r\n\tEvent,\r\n\tHello,\r\n\tInitialize,\r\n\tHeartbeat,\r\n}\r\n\r\nenum Event {\r\n\tINIT_STATE = 'INIT_STATE',\r\n\tPRESENCE_UPDATE = 'PRESENCE_UPDATE',\r\n}\r\n\r\ninterface SocketData extends Data {\r\n\theartbeat_interval?: number;\r\n}\r\n\r\ninterface SocketMessage {\r\n\top: Op;\r\n\tt?: Event;\r\n\td?: SocketData;\r\n}\r\n\r\nexport function useLanyardWs(snowflake: string | string[], instance?: string) {\r\n\tconst [presence, setPresence] = useState<Data>();\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!('WebSocket' in window || 'MozWebSocket' in window)) {\r\n\t\t\tthrow new Error('WebSocket connections not supported in this browser.');\r\n\t\t}\r\n\r\n\t\tlet subscribe_data: {subscribe_to_ids?: string[]; subscribe_to_id?: string};\r\n\r\n\t\tif (typeof snowflake === 'object') {\r\n\t\t\tsubscribe_data = {subscribe_to_ids: snowflake};\r\n\t\t} else {\r\n\t\t\tsubscribe_data = {subscribe_to_id: snowflake};\r\n\t\t}\r\n\r\n\t\tlet heartbeat: ReturnType<typeof setTimeout>;\r\n\t\tlet socket: WebSocket;\r\n\r\n\t\tfunction connect() {\r\n\t\t\tif (heartbeat) {\r\n\t\t\t\tclearInterval(heartbeat);\r\n\t\t\t}\r\n\r\n\t\t\tsocket = new WebSocket(`wss://${instance ?? 'api.lanyard.rest'}/socket`);\r\n\r\n\t\t\tsocket.addEventListener('open', () => {\r\n\t\t\t\tconsole.log('Lanyard: Socket connection opened');\r\n\t\t\t});\r\n\r\n\t\t\tsocket.addEventListener('close', connect);\r\n\r\n\t\t\tsocket.addEventListener('message', event => {\r\n\t\t\t\tconst data: SocketMessage = JSON.parse(event.data);\r\n\r\n\t\t\t\tswitch (data.op) {\r\n\t\t\t\t\tcase Op.Hello:\r\n\t\t\t\t\t\theartbeat = setInterval(() => {\r\n\t\t\t\t\t\t\tif (socket.readyState === socket.OPEN) {\r\n\t\t\t\t\t\t\t\tsocket.send(JSON.stringify({op: Op.Heartbeat}));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, data.d?.heartbeat_interval);\r\n\r\n\t\t\t\t\t\tif (socket.readyState === socket.OPEN) {\r\n\t\t\t\t\t\t\tsocket.send(\r\n\t\t\t\t\t\t\t\tJSON.stringify({op: Op.Initialize, d: subscribe_data}),\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase Op.Event:\r\n\t\t\t\t\t\tswitch (data.t) {\r\n\t\t\t\t\t\t\tcase Event.INIT_STATE:\r\n\t\t\t\t\t\t\tcase Event.PRESENCE_UPDATE:\r\n\t\t\t\t\t\t\t\tif (data.d) {\r\n\t\t\t\t\t\t\t\t\tsetPresence(data.d);\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tconnect();\r\n\r\n\t\treturn () => {\r\n\t\t\tclearInterval(heartbeat);\r\n\r\n\t\t\tsocket.removeEventListener('close', connect);\r\n\t\t\tsocket.close();\r\n\t\t};\r\n\t}, []);\r\n\r\n\treturn presence;\r\n}\r\n\r\nexport default useLanyardWs;\r\n","import useSWR, {SWRConfiguration} from 'swr';\r\nimport {Data, LanyardResponse} from './types';\r\n\r\nexport class LanyardError extends Error {\r\n\tpublic readonly code: number;\r\n\r\n\tconstructor(\r\n\t\tpublic readonly request: Request,\r\n\t\tpublic readonly response: Response,\r\n\t\tmessage: string,\r\n\t) {\r\n\t\tsuper(message);\r\n\t\tthis.code = this.response.status;\r\n\t}\r\n}\r\n\r\nexport type Options = Omit<SWRConfiguration<Data, LanyardError>, 'fetcher'>;\r\n\r\nexport function useLanyard(snowflake: string, instance: string, options?: Options) {\r\n\treturn useSWR<Data, LanyardError>(\r\n\t\t`lanyard:${snowflake}`,\r\n\t\tasync () => {\r\n\t\t\tconst request = new Request(\r\n\t\t\t\t`https://${instance ?? 'api.lanyard.rest'}/v1/users/${snowflake}`,\r\n\t\t\t);\r\n\r\n\t\t\tconst response = await fetch(request);\r\n\r\n\t\t\tconst body = (await response.json()) as LanyardResponse;\r\n\r\n\t\t\tif ('error' in body) {\r\n\t\t\t\tthrow new LanyardError(request, response, body.error.message);\r\n\t\t\t}\r\n\r\n\t\t\treturn body.data;\r\n\t\t},\r\n\t\toptions,\r\n\t);\r\n}\r\n\r\nexport default useLanyard;\r\n"],"mappings":"0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,kBAAAE,EAAA,eAAAC,EAAA,iBAAAC,IAAA,eAAAC,EAAAL,GCAA,IAAAM,EAAkC,iBAyB3B,SAASC,EAAaC,EAA8BC,EAAmB,CAC7E,GAAM,CAACC,EAAUC,CAAW,KAAI,YAAe,EAE/C,sBAAU,IAAM,CACf,GAAI,EAAE,cAAe,QAAU,iBAAkB,QAChD,MAAM,IAAI,MAAM,sDAAsD,EAGvE,IAAIC,EAEA,OAAOJ,GAAc,SACxBI,EAAiB,CAAC,iBAAkBJ,CAAS,EAE7CI,EAAiB,CAAC,gBAAiBJ,CAAS,EAG7C,IAAIK,EACAC,EAEJ,SAASC,GAAU,CACdF,GACH,cAAcA,CAAS,EAGxBC,EAAS,IAAI,UAAU,SAASL,GAAY,2BAA2B,EAEvEK,EAAO,iBAAiB,OAAQ,IAAM,CACrC,QAAQ,IAAI,mCAAmC,CAChD,CAAC,EAEDA,EAAO,iBAAiB,QAASC,CAAO,EAExCD,EAAO,iBAAiB,UAAWE,GAAS,CAC3C,IAAMC,EAAsB,KAAK,MAAMD,EAAM,IAAI,EAEjD,OAAQC,EAAK,QACP,GACJJ,EAAY,YAAY,IAAM,CACzBC,EAAO,aAAeA,EAAO,MAChCA,EAAO,KAAK,KAAK,UAAU,CAAC,GAAI,CAAY,CAAC,CAAC,CAEhD,EAAGG,EAAK,GAAG,kBAAkB,EAEzBH,EAAO,aAAeA,EAAO,MAChCA,EAAO,KACN,KAAK,UAAU,CAAC,GAAI,EAAe,EAAGF,CAAc,CAAC,CACtD,EAGD,UAEI,GACJ,OAAQK,EAAK,OACP,iBACA,kBACAA,EAAK,GACRN,EAAYM,EAAK,CAAC,EAGnB,cAGA,MAGF,cAEA,MAEH,CAAC,CACF,CAEA,OAAAF,EAAQ,EAED,IAAM,CACZ,cAAcF,CAAS,EAEvBC,EAAO,oBAAoB,QAASC,CAAO,EAC3CD,EAAO,MAAM,CACd,CACD,EAAG,CAAC,CAAC,EAEEJ,CACR,CC5GA,IAAAQ,EAAuC,kBAG1BC,EAAN,cAA2B,KAAM,CAGvC,YACiBC,EACAC,EAChBC,EACC,CACD,MAAMA,CAAO,EAJG,aAAAF,EACA,cAAAC,EAIhB,KAAK,KAAO,KAAK,SAAS,MAC3B,CACD,EAIO,SAASE,EAAWC,EAAmBC,EAAkBC,EAAmB,CAClF,SAAO,EAAAC,SACN,WAAWH,IACX,SAAY,CACX,IAAMJ,EAAU,IAAI,QACnB,WAAWK,GAAY,+BAA+BD,GACvD,EAEMH,EAAW,MAAM,MAAMD,CAAO,EAE9BQ,EAAQ,MAAMP,EAAS,KAAK,EAElC,GAAI,UAAWO,EACd,MAAM,IAAIT,EAAaC,EAASC,EAAUO,EAAK,MAAM,OAAO,EAG7D,OAAOA,EAAK,IACb,EACAF,CACD,CACD","names":["src_exports","__export","LanyardError","useLanyard","useLanyardWs","__toCommonJS","import_react","useLanyardWs","snowflake","instance","presence","setPresence","subscribe_data","heartbeat","socket","connect","event","data","import_swr","LanyardError","request","response","message","useLanyard","snowflake","instance","options","useSWR","body"]}