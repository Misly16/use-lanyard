import{useEffect as p,useState as b}from"react";function E(s,o){let[i,n]=b();return p(()=>{if(!("WebSocket"in window||"MozWebSocket"in window))throw new Error("WebSocket connections not supported in this browser.");let t;typeof s=="object"?t={subscribe_to_ids:s}:t={subscribe_to_id:s};let r,e;function c(){r&&clearInterval(r),e=new WebSocket(`wss://${o??"api.lanyard.rest"}/socket`),e.addEventListener("open",()=>{console.log("Lanyard: Socket connection opened")}),e.addEventListener("close",c),e.addEventListener("message",u=>{let a=JSON.parse(u.data);switch(a.op){case 1:r=setInterval(()=>{e.readyState===e.OPEN&&e.send(JSON.stringify({op:3}))},a.d?.heartbeat_interval),e.readyState===e.OPEN&&e.send(JSON.stringify({op:2,d:t}));break;case 0:switch(a.t){case"INIT_STATE":case"PRESENCE_UPDATE":a.d&&n(a.d);break;default:break}break;default:break}})}return c(),()=>{clearInterval(r),e.removeEventListener("close",c),e.close()}},[]),i}import l from"swr";var d=class extends Error{constructor(i,n,t){super(t);this.request=i;this.response=n;this.code=this.response.status}};function g(s,o,i){return l(`lanyard:${s}`,async()=>{let n=new Request(`https://${o??"api.lanyard.rest"}/v1/users/${s}`),t=await fetch(n),r=await t.json();if("error"in r)throw new d(n,t,r.error.message);return r.data},i)}export{d as LanyardError,g as useLanyard,E as useLanyardWs};
//# sourceMappingURL=index.mjs.map